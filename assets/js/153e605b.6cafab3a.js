"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[8198],{5517:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>x});const r=JSON.parse('{"id":"education/prompt-engineering/mcp","title":"MCP","description":"Model Context Protocol","source":"@site/docs/education/01-prompt-engineering/06-mcp.mdx","sourceDirName":"education/01-prompt-engineering","slug":"/education/prompt-engineering/mcp","permalink":"/vibe-labs/docs/education/prompt-engineering/mcp","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/vibe-labs/docs/education/01-prompt-engineering/06-mcp.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"MCP","description":"Model Context Protocol","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Agents","permalink":"/vibe-labs/docs/education/prompt-engineering/agents"},"next":{"title":"Prompts","permalink":"/vibe-labs/docs/category/prompts"}}');var s=n(3420),i=n(8906),a=n(7),o=n(1519);const l={title:"MCP",description:"Model Context Protocol",hide_table_of_contents:!0},d="Model Context Protocol (MCP)",c={},x=[];function h(e){const t={h1:"h1",header:"header",mermaid:"mermaid",p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"model-context-protocol-mcp",children:"Model Context Protocol (MCP)"})}),"\n",(0,s.jsxs)(o.A,{queryString:"primary",children:[(0,s.jsx)(a.A,{value:"overview",label:"Overview",children:(0,s.jsx)(t.mermaid,{value:'graph TD\n    subgraph User Interaction\n        A(User) --\x3e|"Plan a full trip<br/>train, hotel, cab"| B(Assistant Agent)\n    end\n\n    subgraph A2A["Agent-to-Agent (A2A) Collaboration"]\n        B --\x3e|"Delegates<br/>Full Trip Planning<br/>(A2A)"| C{Travel Planning Agent}\n\n        C --\x3e|"Delegates<br/>Book Train<br/>(A2A)"| D(Train Booking Agent)\n        C --\x3e|"Delegates<br/>Find Hotel<br/>(A2A)"| E(Hotel Booking Agent)\n        C --\x3e|"Delegates<br/>Arrange Cab<br/>(A2A)"| F(Cab Service Agent)\n\n        D --\x3e|"Train Details<br/>(A2A)"| C\n        E --\x3e|"Hotel Options<br/>(A2A)"| C\n        F --\x3e|"Cab Confirmation<br/>(A2A)"| C\n\n        C --\x3e|"Compiles & Returns Full Plan<br/>(A2A)"| B\n    end\n\n    subgraph MCP["Agent-to-Tool (MCP) Interactions"]\n        D --\x3e|"Requests Train API Access<br/>(MCP)"| D1("Train API Server (MCP)")\n        D1 --\x3e|"Calls External Train API"| D2(External Train Booking System)\n        D2 --\x3e|"Returns Train Data"| D1\n        D1 --\x3e|"Provides Train Details<br/>(MCP)"| D\n\n        E --\x3e|"Requests Hotel API Access<br/>(MCP)"| E1("Hotel API Server (MCP)")\n        E1 --\x3e|"Calls External Hotel API"| E2(External Hotel Booking System)\n        E2 --\x3e|"Returns Hotel Data"| E1\n        E1 --\x3e|"Provides Hotel Options<br/>(MCP)"| E\n\n        F --\x3e|"Requests Cab API Access<br/>(MCP)"| F1("Cab API Server (MCP)")\n        F1 --\x3e|"Calls External Cab API"| F2(External Cab Service)\n        F2 --\x3e|"Returns Cab Confirmation"| F1\n        F1 --\x3e|"Provides Cab Confirmation<br/>(MCP)"| F\n    end\n\n    B --\x3e|"Presents Full Itinerary"| A'})}),(0,s.jsx)(a.A,{value:"mcp-a2a",label:"MCP vs A2A",children:(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Model Context Protocol (MCP)"}),(0,s.jsx)("th",{children:"Agent-2-Agent (A2A)"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Visualization"}),(0,s.jsx)("td",{children:(0,s.jsx)(t.mermaid,{value:"graph TD\nA[AI Agent/LLM] --\x3e|Requests Tool Call with Context| B{MCP Client}\nB --\x3e|Standardized Request| C[MCP Server]\nC --\x3e|Executes Tool/Accesses Data| D[External API/Tool/Database]\nD --\x3e|Tool Result| C\nC --\x3e|Standardized Response| B\nB --\x3e|Provides Result to LLM| A"})}),(0,s.jsx)("td",{children:(0,s.jsx)(t.mermaid,{value:"graph TD\n    user --\x3e client(Client Agent)\n    client --\x3e|A2A| remote1(Remote Agent)\n    client --\x3e|A2A| remote2(Remote Agent)\n    client --\x3e user"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Purpose"}),(0,s.jsx)("td",{children:'Standardizes how AI models (LLMs) integrate and share data with external tools, systems, and data sources. Connects AI to the "real world" context'}),(0,s.jsx)("td",{children:'Enables AI agents to communicate and collaborate securely across platforms and vendors. Creates a "universal language" for agents to work together'})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Developed By"}),(0,s.jsx)("td",{children:"Anthropic"}),(0,s.jsx)("td",{children:"Google"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Integration Paradigm"}),(0,s.jsx)("td",{children:"Vertical integration: AI model to external data/tools. Extends AI's context awareness"}),(0,s.jsx)("td",{children:"Horizontal integration: Agent to Agent communication. Enables multi-agent workflows"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Core Entities Interacting"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Host: AI app"}),(0,s.jsx)("li",{children:"Client: intermediary"}),(0,s.jsx)("li",{children:"Server: data/tool provider"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Client Agent: requests tasks"}),(0,s.jsx)("li",{children:"Remote Agent: performs tasks"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Key Abstractions"}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Tools: executable functions"}),(0,s.jsx)("li",{children:"Resources: structured data streams"}),(0,s.jsx)("li",{children:"Prompts: instruction templates"})]})}),(0,s.jsx)("td",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Agent Cards: capability discovery"}),(0,s.jsx)("li",{children:"Tasks: unit of work"}),(0,s.jsx)("li",{children:"Parts: multi-modal content"})]})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Communication Protocol"}),(0,s.jsx)("td",{children:"JSON-RPC 2.0 over stateful connections. Inspired by Language Server Protocol (LSP)"}),(0,s.jsx)("td",{children:"JSON-RPC 2.0 for message exchange; HTTP(S) as transport; Server-Sent Events (SSE) for real-time streaming"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Content Types Supported"}),(0,s.jsx)("td",{children:"Structured data streams (Resources), API responses, file contents, logs"}),(0,s.jsx)("td",{children:'Multi-modal "Parts": TextPart, FilePart (binary data), DataPart (structured JSON)'})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Capability Discovery Mechanism"}),(0,s.jsx)("td",{children:"Dynamic tool discovery: AI queries for available tools at runtime"}),(0,s.jsx)("td",{children:"Agent Cards: Machine-readable manifests describing agent skills, I/O types, authentication"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Task Management Model"}),(0,s.jsx)("td",{children:"Focus on providing context and tools for AI to execute tasks. AI decides tool use"}),(0,s.jsx)("td",{children:'Structured around "Tasks" with unique IDs and defined states; supports long-running tasks with progress updates'})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Security & Authentication Approach"}),(0,s.jsx)("td",{children:(0,s.jsx)(t.p,{children:"User consent and control, data privacy, tool safety. Requires explicit\nuser consent for data access/operations/tool invocation"})}),(0,s.jsx)("td",{children:'"Secure by Default." Standardized access controls, authentication/authorization options (e.g., JWTs for push notifications). "Opaque" agent design'})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Key Advantages"}),(0,s.jsx)("td",{children:"Standardized integration, enhanced context awareness, dynamic tool discovery, improved security/access control, ecosystem growth"}),(0,s.jsx)("td",{children:"Cross-platform communication, scalability without rework, smarter automation, faster time-to-value, unified governance"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Primary Challenges"}),(0,s.jsx)("td",{children:"Engineering complexity, scalability/performance, potential fragmentation, identity management, identified security vulnerabilities (prompt injection, tool permissions)"}),(0,s.jsx)("td",{children:"Inherited complexity/cost of multi-agent systems. Ongoing development for advanced features (e.g., dynamic UX negotiation)"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Typical Use Cases"}),(0,s.jsx)("td",{children:"Enterprise assistants (CRM, docs), natural language data access (SQL), desktop assistants (file access), multi-tool agents, customer support chatbots, personalized learning, healthcare diagnostics"}),(0,s.jsx)("td",{children:"Enterprise automation (ordering, supply chain), hiring process simplification, customer experience, general multi-agent orchestration"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Relationship to LLMs/Agents"}),(0,s.jsx)("td",{children:"Grounds LLMs/agents in real-time, external data and enables them to take actions in the real world"}),(0,s.jsx)("td",{children:"Enables communication between autonomous AI agents, regardless of their internal LLM or framework"})]})]})]})})]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);